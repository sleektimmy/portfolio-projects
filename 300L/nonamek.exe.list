EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
nonamek.exe -- emu8086 assembler version: 4.08  
 
[ 29 Jan 2022  --  09:23:08 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;AUTHOR: ANUEBUNWA VICTOR O
[   2]        :                                       ;PROGRAM TO CALCULATE AVERAGE OF TWO NUMBERS
[   3]        :                                       ;USING MASM ASSEMBLER
[   4]        :                                       
[   5]        :                                       .MODEL SMALL
[   6]        :                                       .STACK
[   7]        :                                       DATA SEGMENT   ; Beginning of data segment
[   8]    0100: 0F                                    num1 DB 15 ;Declaration of first value
[   9]    0101: 03                                    num2 DB 3   ;Declaration of second value
[  10]    0102: 00                                    average DB ?          ;Empty slot to store average
[  11]    0103: 20 72 65 6D 61 69 6E 64 65 72 20 24   remainder DB " remainder ",'$'
                                                    
[  12]    010F: 00                                    rem DB ?           ;Empty slot to store remainder
[  13]        :                                       DATA ENDS    ;End of data segment
[  14]        :                                       CODE SEGMENT   ; Beginning of code segment
[  15]        :                                       ASSUME CS: CODE, DS: DATA
[  16]    0110:                                       Start:     ;Starting address
[  17]    0110: B8 10 00                              MOV AX, DATA
[  18]    0113: 8E D8                                 MOV DS, AX   ;Initializes the DS(Data segment) register
[  19]        :                                       
[  20]    0115: A0 00 00                              MOV AL, num1
[  21]    0118: 02 06 01 00                           ADD AL, num2
[  22]    011C: B4 00                                 MOV AH, 00   ; Clears AH Register(Because this is where our remainder will be)
[  23]    011E: B3 02                                 MOV BL, 02   ; Loads divisor into BL register
[  24]    0120: F6 F3                                 DIV BL    ; DIV : divide AX by BL. Remainder in AH and result in AL
[  25]        :                                       
[  26]    0122: 04 30                                 ADD AL, 48
[  27]    0124: A2 02 00                              MOV average, AL  ;stores average
[  28]    0127: 80 C4 30                              ADD AH, 48
[  29]    012A: 88 26 0F 00                           MOV rem, AH   ;stores remainder
[  30]        :                                       
[  31]    012E: E8 05 00                              CALL display           ;call procedure "display"
[  32]        :                                       
[  33]    0131: B8 00 4C                              MOV AX, 4C00H  ;Returns control to MS-DOS
[  34]    0134: CD 21                                 INT 21H
[  35]        :                                       
[  36]    0136:                                       display proc           ;Procedure "display"
[  37]    0136: B4 02                                 MOV AH, 02H
[  38]    0138: 8A 16 02 00                           MOV DL, average
[  39]    013C: CD 21                                 INT 21H    ;Displays average
[  40]        :                                       
[  41]    013E: B4 09                                 MOV AH, 09H
[  42]    0140: BA 03 00                              LEA DX, remainder
[  43]    0143: CD 21                                 INT 21H    ;Displays message "remainder"
[  44]        :                                       
[  45]    0145: B4 02                                 MOV AH, 02H
[  46]    0147: 8A 16 0F 00                           MOV DL, rem
[  47]    014B: CD 21                                 INT 21H    ;Displays remainder
[  48]    014D: C3                                    ret     ;returns control back to the point this procedure was called
[  49]        :                                       display endp           ;End of procedure
[  50]        :                                       
[  51]        :                                       
[  52]        :                                       
[  53]        :                                       CODE ENDS    ;End of code segment
[  54]        :                                       END Start    ;End of program
[  55]        :                                       
[  56]        :                                       
[  57]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 4E      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 34      -   check sum (l.byte)
0013: 35      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 11      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 11      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
