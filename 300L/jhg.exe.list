EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
jhg.exe -- emu8086 assembler version: 4.08  
 
[ 29 Jan 2022  --  10:13:02 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;AUTHOR: YUSUF TIMILEYIN ADURAGBEMI
[   2]        :                                       ;MATRIC: CPE/2018/1112
[   3]        :                                       ;PROGRAM TO CALCULATE SUM & AVERAGE OF TWO NUMBERS
[   4]        :                                       ;USING MASM ASSEMBLER
[   5]        :                                       include 'emu8086.inc'
[   6]        :                                       
[   7]        :                                       .MODEL SMALL
[   8]        :                                       .STACK
[   9]        :                                       DATA SEGMENT   ; Beginning of data segment
[  10]    0100: 0F                                    num1 DB 15 ;Declaration of first value
[  11]    0101: 03                                    num2 DB 3   ;Declaration of second value
[  12]    0102: 00                                    average DB ?          ;Empty slot to store average
[  13]    0103: 20 72 65 6D 61 69 6E 64 65 72 20 24   remainder DB " remainder ",'$'
                                                    
[  14]    010F: 00                                    rem DB ?           ;Empty slot to store remainder
[  15]    0110: 00                                    sum DB ? ; Empty slot for to store sum
[  16]        :                                       DATA ENDS    ;End of data segment
[  17]        :                                       CODE SEGMENT   ; Beginning of code segment
[  18]        :                                       ASSUME CS: CODE, DS: DATA
[  19]    0120:                                       Start:     ;Starting address
[  20]    0120: B8 10 00                              MOV AX, DATA
[  21]    0123: 8E D8                                 MOV DS, AX   ;Initializes the DS(Data segment) register
[  22]        :                                       
[  23]    0125: A0 00 00                              MOV AL, num1
[  24]    0128: 02 06 01 00                           ADD AL, num2
[  25]    012C: B4 00                                 MOV AH, 00   ; Clears AH Register(Because this is where our remainder will be)
[  26]    012E: B3 02                                 MOV BL, 02   ; Loads divisor into BL register
[  27]    0130: F6 F3                                 DIV BL    ; DIV : divide AX by BL. Remainder in AH and result in AL
[  28]        :                                       
[  29]    0132: A2 10 00                              MOV sum, AL
[  30]        :                                       
[  31]    0135: 04 30                                 ADD AL, 48
[  32]    0137: A2 02 00                              MOV average, AL  ;stores average
[  33]    013A: 80 C4 30                              ADD AH, 48
[  34]    013D: 88 26 0F 00                           MOV rem, AH   ;stores remainder
[  35]        :                                       
[  36]    0141: E8 05 00                              CALL display           ;call procedure "display"
[  37]        :                                       
[  38]    0144: B8 00 4C                              MOV AX, 4C00H  ;Returns control to MS-DOS
[  39]    0147: CD 21                                 INT 21H
[  40]        :                                       
[  41]    0149:                                       display proc           ;Procedure "display"
[  42]        :                                       
[  43]        :                                       
[  44]    0149: B2 0A                                 MOV dl, 10
[  45]    014B: B4 02                                 MOV ah, 02h
[  46]    014D: CD 21                                 INT 21h
[  47]        :                                       
[  48]    014F: B4 02                                 MOV AH, 02H
[  49]    0151: 8A D0                                 MOV DL, AL
[  50]    0153: CD 21                                 INT 21H
[  51]        :                                       
[  52]        :                                       
[  53]    0155: 50 56 EB 10 54 68 69 73 20 69 73 20   print 'This is the sum'
                74 68 65 20 73 75 6D 00 BE 39 00 2E 
                8A 04 3C 00 74 07 46 B4 0E CD 10 EB 
                F2 5E 58                            
[  54]    017C: B4 02                                 MOV AH, 02H
[  55]    017E: 8A 16 02 00                           MOV DL, average
[  56]    0182: CD 21                                 INT 21H    ;Displays average
[  57]        :                                       
[  58]    0184: B4 09                                 MOV AH, 09H
[  59]    0186: BA 03 00                              LEA DX, remainder
[  60]    0189: CD 21                                 INT 21H    ;Displays message "remainder"
[  61]        :                                       
[  62]    018B: B4 02                                 MOV AH, 02H
[  63]    018D: 8A 16 0F 00                           MOV DL, rem
[  64]    0191: CD 21                                 INT 21H    ;Displays remainder
[  65]    0193: C3                                    ret     ;returns control back to the point this procedure was called
[  66]        :                                       display endp           ;End of procedure
[  67]        :                                       
[  68]        :                                       
[  69]        :                                       
[  70]        :                                       CODE ENDS    ;End of code segment
[  71]        :                                       END Start    ;End of program
[  72]        :                                       
[  73]        :                                       
[  74]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 94      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: AB      -   check sum (l.byte)
0013: 72      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 12      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 12      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
